# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2023-06-02T23:19:40+00:00

from __future__ import annotations

from dataclasses import dataclass, field
from enum import Enum
from typing import Optional, Union

from dataclass_wizard import JSONWizard

Reference = dict[str, str]


@dataclass
class Contact(JSONWizard):
    name: Optional[str] = None
    url: Optional[str] = None
    email: Optional[str] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class License(JSONWizard):
    name: str
    url: Optional[str] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class ServerVariable(JSONWizard):
    default: str
    enum: Optional[list[str]] = None
    description: Optional[str] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


class Type(Enum):
    array = "array"
    boolean = "boolean"
    integer = "integer"
    number = "number"
    object = "object"
    string = "string"


@dataclass
class Discriminator(JSONWizard):
    propertyName: str
    mapping: Optional[dict[str, str]] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class XML(JSONWizard):
    name: Optional[str] = None
    namespace: Optional[str] = None
    prefix: Optional[str] = None
    attribute: Optional[bool] = False
    wrapped: Optional[bool] = False

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class Example(JSONWizard):
    summary: Optional[str] = None
    description: Optional[str] = None
    value: Optional[str] = None
    externalValue: Optional[str] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


class Style(Enum):
    simple = "simple"


SecurityRequirement = Optional[dict[str, list[str]]]


@dataclass
class ExternalDocumentation(JSONWizard):
    url: str
    description: Optional[str] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


ExampleXORExamples = str


@dataclass
class SchemaXORContentItem(JSONWizard):
    pass

    class Meta(JSONWizard.Meta):
        recursive_classes = True


SchemaXORContent = Union[str, SchemaXORContentItem]


class In(Enum):
    path = "path"


class Style1(Enum):
    matrix = "matrix"
    label = "label"
    simple = "simple"


class Required(Enum):
    bool_True = True


@dataclass
class ParameterLocationItem(JSONWizard):
    required: Required
    in_: Optional[In] = None
    style: Optional[Style1] = "simple"

    class Meta(JSONWizard.Meta):
        recursive_classes = True


class In1(Enum):
    query = "query"


class Style2(Enum):
    form = "form"
    spaceDelimited = "spaceDelimited"
    pipeDelimited = "pipeDelimited"
    deepObject = "deepObject"


@dataclass
class ParameterLocationItem1(JSONWizard):
    in_: Optional[In1] = None
    style: Optional[Style2] = "form"

    class Meta(JSONWizard.Meta):
        recursive_classes = True


class In2(Enum):
    header = "header"


class Style3(Enum):
    simple = "simple"


@dataclass
class ParameterLocationItem2(JSONWizard):
    in_: Optional[In2] = None
    style: Optional[Style3] = "simple"

    class Meta(JSONWizard.Meta):
        recursive_classes = True


class In3(Enum):
    cookie = "cookie"


class Style4(Enum):
    form = "form"


@dataclass
class ParameterLocationItem3(JSONWizard):
    in_: Optional[In3] = None
    style: Optional[Style4] = "form"

    class Meta(JSONWizard.Meta):
        recursive_classes = True


ParameterLocation = Union[
    ParameterLocationItem,
    ParameterLocationItem1,
    ParameterLocationItem2,
    ParameterLocationItem3,
]


class Type1(Enum):
    apiKey = "apiKey"


class In4(Enum):
    header = "header"
    query = "query"
    cookie = "cookie"


@dataclass
class APIKeySecurityScheme(JSONWizard):
    type: Type1
    name: str
    in_: In4
    description: Optional[str] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


class Type2(Enum):
    http = "http"


@dataclass
class HTTPSecurityScheme1(JSONWizard):
    scheme: str
    type: Type2 = "http"
    scheme: Optional[str] = None
    bearerFormat: Optional[str] = None
    description: Optional[str] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class HTTPSecurityScheme2(JSONWizard):
    scheme: str
    type: Type2 = "http"
    scheme: Optional[str] = None
    bearerFormat: Optional[str] = None
    description: Optional[str] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


HTTPSecurityScheme = Union[HTTPSecurityScheme1, HTTPSecurityScheme2]


class Type4(Enum):
    oauth2 = "oauth2"


class Type5(Enum):
    openIdConnect = "openIdConnect"


@dataclass
class OpenIdConnectSecurityScheme(JSONWizard):
    type: Type5
    openIdConnectUrl: str
    description: Optional[str] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class ImplicitOAuthFlow(JSONWizard):
    authorizationUrl: str
    scopes: dict[str, str]
    refreshUrl: Optional[str] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class PasswordOAuthFlow(JSONWizard):
    tokenUrl: str
    scopes: dict[str, str]
    refreshUrl: Optional[str] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class ClientCredentialsFlow(JSONWizard):
    tokenUrl: str
    scopes: dict[str, str]
    refreshUrl: Optional[str] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class AuthorizationCodeOAuthFlow(JSONWizard):
    authorizationUrl: str
    tokenUrl: str
    scopes: dict[str, str]
    refreshUrl: Optional[str] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


Callback = dict[str, str]


class Style5(Enum):
    form = "form"
    spaceDelimited = "spaceDelimited"
    pipeDelimited = "pipeDelimited"
    deepObject = "deepObject"


@dataclass
class Info(JSONWizard):
    title: str
    version: str
    description: Optional[str] = None
    termsOfService: Optional[str] = None
    contact: Optional[Contact] = None
    license: Optional[License] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class Server(JSONWizard):
    url: str
    description: Optional[str] = None
    variables: Optional[dict[str, ServerVariable]] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class Schema(JSONWizard):
    title: Optional[str] = None
    multipleOf: Optional[float] = None
    maximum: Optional[float] = None
    exclusiveMaximum: Optional[bool] = False
    minimum: Optional[float] = None
    exclusiveMinimum: Optional[bool] = False
    maxLength: Optional[int] = None
    minLength: Optional[int] = 0
    pattern: Optional[str] = None
    maxItems: Optional[int] = None
    minItems: Optional[int] = 0
    uniqueItems: Optional[bool] = False
    maxProperties: Optional[int] = None
    minProperties: Optional[int] = 0
    required: Optional[list[str]] = None
    enum: Optional[list] = None
    type: Optional[Type] = None
    not_: Optional[Union[Schema, Reference]] = None
    allOf: Optional[list[Union[Schema, Reference]]] = None
    oneOf: Optional[list[Union[Schema, Reference]]] = None
    anyOf: Optional[list[Union[Schema, Reference]]] = None
    items: Optional[Union[Schema, Reference]] = None
    properties: Optional[dict[str, Union[Schema, Reference]]] = None
    additionalProperties: Optional[Union[Schema, Reference, bool]] = True
    description: Optional[str] = None
    format: Optional[str] = None
    default: Optional[str] = None
    nullable: Optional[bool] = False
    discriminator: Optional[Discriminator] = None
    readOnly: Optional[bool] = False
    writeOnly: Optional[bool] = False
    example: Optional[str] = None
    externalDocs: Optional[ExternalDocumentation] = None
    deprecated: Optional[bool] = False
    xml: Optional[XML] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class Tag(JSONWizard):
    name: str
    description: Optional[str] = None
    externalDocs: Optional[ExternalDocumentation] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class OAuthFlows(JSONWizard):
    implicit: Optional[ImplicitOAuthFlow] = None
    password: Optional[PasswordOAuthFlow] = None
    clientCredentials: Optional[ClientCredentialsFlow] = None
    authorizationCode: Optional[AuthorizationCodeOAuthFlow] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class Link(JSONWizard):
    operationId: Optional[str] = None
    operationRef: Optional[str] = None
    parameters: Optional[dict[str, str]] = None
    requestBody: Optional[str] = None
    description: Optional[str] = None
    server: Optional[Server] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class OAuth2SecurityScheme(JSONWizard):
    type: Type4
    flows: OAuthFlows
    description: Optional[str] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


SecurityScheme = Union[
    APIKeySecurityScheme,
    HTTPSecurityScheme,
    OAuth2SecurityScheme,
    OpenIdConnectSecurityScheme,
]


@dataclass
class Model(JSONWizard):
    openapi: str
    info: Info
    paths: Paths
    externalDocs: Optional[ExternalDocumentation] = None
    servers: Optional[list[Server]] = None
    security: Optional[list[SecurityRequirement]] = None
    tags: Optional[list[Tag]] = None
    components: Optional[Components] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class Components(JSONWizard):
    schemas: Optional[dict[str, Union[Schema, Reference]]] = None
    responses: Optional[dict[str, Union[Reference, Response]]] = None
    parameters: Optional[dict[str, Union[Reference, Parameter]]] = None
    examples: Optional[dict[str, Union[Reference, Example]]] = None
    requestBodies: Optional[dict[str, Union[Reference, RequestBody]]] = None
    headers: Optional[dict[str, Union[Reference, Header]]] = None
    securitySchemes: Optional[dict[str, Union[Reference, SecurityScheme]]] = None
    links: Optional[dict[str, Union[Reference, Link]]] = None
    callbacks: Optional[dict[str, Union[Reference, Callback]]] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class Response(JSONWizard):
    description: str
    headers: Optional[dict[str, Union[Header, Reference]]] = None
    content: Optional[dict[str, MediaType]] = None
    links: Optional[dict[str, Union[Link, Reference]]] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class MediaType(JSONWizard):
    schema_: Optional[Union[Schema, Reference]] = None
    example: Optional[str] = None
    examples: Optional[dict[str, Union[Example, Reference]]] = None
    encoding: Optional[dict[str, Encoding]] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class Header(JSONWizard):
    description: Optional[str] = None
    required: Optional[bool] = False
    deprecated: Optional[bool] = False
    allowEmptyValue: Optional[bool] = False
    style: Optional[Style] = "simple"
    explode: Optional[bool] = None
    allowReserved: Optional[bool] = False
    schema_: Optional[Union[Schema, Reference]] = None
    content: Optional[dict[str, MediaType]] = None
    example: Optional[str] = None
    examples: Optional[dict[str, Union[Example, Reference]]] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class PathItem(JSONWizard):
    field_ref: Optional[str] = None
    summary: Optional[str] = None
    description: Optional[str] = None
    servers: Optional[list[Server]] = None
    servers: Optional[list[str]] = None
    parameters: Optional[list[Union[Parameter, Reference]]] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


Paths = Union[dict[str, PathItem], dict[str, str]]


@dataclass
class Operation(JSONWizard):
    responses: Responses
    tags: Optional[list[str]] = None
    summary: Optional[str] = None
    description: Optional[str] = None
    externalDocs: Optional[ExternalDocumentation] = None
    operationId: Optional[str] = None
    parameters: Optional[list[Union[Parameter, Reference]]] = None
    requestBody: Optional[Union[RequestBody, Reference]] = None
    callbacks: Optional[dict[str, Union[Callback, Reference]]] = None
    deprecated: Optional[bool] = False
    security: Optional[list[SecurityRequirement]] = None
    servers: Optional[list[Server]] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class Responses(JSONWizard):
    default: Optional[Union[Response, Reference]] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class Parameter(JSONWizard):
    name: str
    in_: str
    description: Optional[str] = None
    required: Optional[bool] = False
    deprecated: Optional[bool] = False
    allowEmptyValue: Optional[bool] = False
    style: Optional[str] = None
    explode: Optional[bool] = None
    allowReserved: Optional[bool] = False
    schema_: Optional[Union[Schema, Reference]] = None
    content: Optional[dict[str, MediaType]] = None
    example: Optional[str] = None
    examples: Optional[dict[str, Union[Example, Reference]]] = None

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class RequestBody(JSONWizard):
    content: dict[str, MediaType]
    description: Optional[str] = None
    required: Optional[bool] = False

    class Meta(JSONWizard.Meta):
        recursive_classes = True


@dataclass
class Encoding(JSONWizard):
    contentType: Optional[str] = None
    headers: Optional[dict[str, Union[Header, Reference]]] = None
    style: Optional[Style5] = None
    explode: Optional[bool] = None
    allowReserved: Optional[bool] = False

    class Meta(JSONWizard.Meta):
        recursive_classes = True
